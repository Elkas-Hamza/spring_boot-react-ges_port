package com.hamzaelkasmi.stage.controller;

import com.hamzaelkasmi.stage.model.Conteneure;
import com.hamzaelkasmi.stage.service.ConteneureService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/conteneurs")
@CrossOrigin(origins = "http://localhost:3000", allowedHeaders = "*", methods = {RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE, RequestMethod.OPTIONS}, allowCredentials = "true")
public class ConteneureController {

    @Autowired
    private ConteneureService conteneureService;

    @GetMapping
    @PreAuthorize("hasAnyRole('ADMIN', 'USER')")
    public ResponseEntity<List<Conteneure>> getAllConteneures() {
        List<Conteneure> conteneures = conteneureService.getAllConteneures();
        return new ResponseEntity<>(conteneures, HttpStatus.OK);
    }

    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('ADMIN', 'USER')")
    public ResponseEntity<Conteneure> getConteneureById(@PathVariable("id") String id) {
        // Check if this is a comma-separated list
        if (id.contains(",")) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
        
        Optional<Conteneure> conteneureData = conteneureService.getConteneureById(id);
        if (conteneureData.isPresent()) {
            return new ResponseEntity<>(conteneureData.get(), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
    
    @GetMapping("/multiple/{ids}")
    @PreAuthorize("hasAnyRole('ADMIN', 'USER')")
    public ResponseEntity<List<Conteneure>> getConteneursByIds(@PathVariable("ids") String ids) {
        List<String> idList = Arrays.asList(ids.split(","));
        List<Conteneure> conteneurs = new ArrayList<>();
        
        for (String id : idList) {
            Optional<Conteneure> conteneur = conteneureService.getConteneureById(id.trim());
            conteneur.ifPresent(conteneurs::add);
        }
        
        if (conteneurs.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        
        return new ResponseEntity<>(conteneurs, HttpStatus.OK);
    }

    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Conteneure> createConteneure(@RequestBody Conteneure conteneure) {
        try {
            // Force ID to be null so it will be generated by the ConteneureIdGenerator
            conteneure.setId_conteneure(null);
            
            Conteneure _conteneure = conteneureService.saveConteneure(conteneure);
            return new ResponseEntity<>(_conteneure, HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Conteneure> updateConteneure(@PathVariable("id") String id, @RequestBody Conteneure conteneure) {
        Optional<Conteneure> conteneureData = conteneureService.getConteneureById(id);
        if (conteneureData.isPresent()) {
            Conteneure _conteneure = conteneureData.get();
            _conteneure.setNom_conteneure(conteneure.getNom_conteneure());
            return new ResponseEntity<>(conteneureService.saveConteneure(_conteneure), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<HttpStatus> deleteConteneure(@PathVariable("id") String id) {
        try {
            conteneureService.deleteConteneure(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
} 